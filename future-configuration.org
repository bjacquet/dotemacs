#+TITLE: Bruno Jacquet's Emacs configuration
#+AUTHOR: Bruno Jacquet
#+STARTUP: showeverything
#+TOC: true

# inspiration:
# - https://github.com/munen/emacs.d/blob/master/configuration.org
# - https://github.com/jamiecollinson/dotfiles/blob/master/config.org/
# - http://pages.sachachua.com/.emacs.d/Sacha.html

My Emacs configuration used to span across multiple files, one per major
mode. My goal on this literate programming attempt is to make the configuration
more easier to search, and change; remove unecessary logic; cleanup unused
packages; speedup loading time; and follow the steps of the great Donald Knuth.

* Setup

** Package sources

The repositories from which we'll download packages and where packages are stored.

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-user-dir (expand-file-name "~/.emacs.d/future-packages/")
      package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")))
(package-initialize)
#+END_SRC

If ~use-package~ isn't installed, install it.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-verbose t
      use-package-always-ensure t)

(eval-when-compile
  (require 'use-package))
#+END_SRC

Some packages don't come through `use-pacakge`.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/my-packages/"))
#+END_SRC

** Packages to be installed

List all packages to install regardless of the system we are at. Additional package configuration is defined further down in this file.

#+BEGIN_SRC emacs-lisp
(defvar my-packages '(ag
                      all-the-icons
                      all-the-icons-dired
                      auto-complete
                      birds-of-paradise-plus-theme
                      bm
                      color-theme-modern
                      darkroom
                      darktooth-theme
                      dashboard
                      deft
                      detour
                      dracula-theme
                      expand-region
                      flycheck
                      flyspell-popup
                      golden-ratio
                      goto-last-change
                      handlebars-mode
                      handlebars-sgml-mode
                      haskell-mode
                      htmlize
                      js-react-redux-yasnippets
                      json-mode
                      marginalia
                      markdown-mode
                      multiple-cursors
                      neotree
                      nord-theme
                      org-pomodoro
                      pager
                      panda-theme
                      paredit
                      ranger
                      react-snippets
                      rinari
                      rjsx-mode
                      robe
                      rust-mode
                      selectrum
                      selectrum-prescient
                      shrink-whitespace
                      slim-mode
                      smart-mode-line
                      sr-speedbar
                      treemacs-icons-dired
                      treemacs-magit
                      treemacs-projectile
                      undo-tree
                      winpoint
                      wn-mode
                      yasnippet
                      yasnippet-snippets))
#+END_SRC

** Install packages

#+BEGIN_SRC emacs-lisp
(dolist (p my-packages)
  (unless (package-installed-p p)
    (package-refresh-contents)
    (package-install p))
  (add-to-list 'package-selected-packages p))
#+END_SRC


* System information

Configurations change depending on which system I am at.

#+begin_src emacs-lisp
(defvar mac-p (or (eq window-system 'ns) (eq window-system 'mac)))
(defvar icapital (and mac-p (zerop (string-match (system-name) "ICN-5A92-BUET"))))
#+end_src

Change macOS modifier keys — to avoid muscle memory loss.

#+begin_src emacs-lisp
(when mac-p
  (setq mac-option-key-is-meta  nil)
  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier    'meta)
  (setq mac-option-modifier     nil))
#+end_src


* Default Settings

Configurations for built-in Emacs features.

** Do not auto save files

#+begin_src emacs-lisp
(setq auto-save-default nil)
#+end_src

** Blink cursor forever

#+begin_src emacs-lisp
(setq blink-cursor-blinks 0)
#+end_src

** Use UTF as coding system

#+begin_src emacs-lisp
(setq current-language-environment "UTF-8")
#+end_src

** Pop-up backtrace buffer on error

#+begin_src emacs-lisp
(setq debug-on-error t)
#+end_src


** Set input method

#+begin_src emacs-lisp
(setq default-input-method "portuguese-prefix")
#+end_src

*** Wrap columns on 80 characters

#+begin_src emacs-lisp
(setq fill-column 80)
#+end_src


** Show line number in modeline

#+begin_src emacs-lisp
(setq line-number-mode t)
#+end_src

*** Do not make backup files

#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src

** End files with new line

#+begin_src emacs-lisp
(setq require-final-newline t)
#+end_src

** Replace audible bell with visible bell

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
(setq visible-bell t)
#+end_src

** Do not show the tool bar

#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

** User information

#+begin_src emacs-lisp
(setq user-full-name "Bruno Jacquet")
(setq user-mail-address (or (and icapital
                                 (rot13-string "o.wnpdhrg@ehagvzr-eribyhgvba.pbz"))
                            (rot13-string "oehawnpg@cebgbaznvy.pbz")))
#+end_src

** Frame title

Set the frame tile to filename and path or buffer name.

#+begin_src emacs-lisp
(setq frame-title-format '((:eval (if (buffer-file-name)
                                      (abbreviate-file-name (buffer-file-name))
                                      "%b"))))
#+end_src

** Ask y/n instead of yes/no

This is a favorable shorthand.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Enable Narrow To Region

Enable narrow-to-region (~C-x n n~ / ~C-x n w~).

#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+end_src

** Enable Narrow To Page

Enable narrow-to-page (~C-x n p~).

#+begin_src emacs-lisp
(put 'narrow-to-page 'disabled nil)
#+end_src

** Enable Upcase Region

Enable upcase-region (~C-x C-u~).

#+begin_src emacs-lisp
(put 'upcase-region 'disabled nil)
#+end_src

** Enable Downcase Region

Enable downcase-region (~C-x C-l~).

#+begin_src emacs-lisp
(put 'downcase-region 'disabled nil)
#+end_src

** ~dired-mode~

Ability to use ~a~ to visit a new directory or file in dired instead of using ~RET~. ~RET~ works just fine, but it will create a new buffer for every interaction whereas ~a~ reuses the current buffer.

#+begin_src emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+end_src

Human readable units

#+begin_src emacs-lisp
(setq-default dired-listing-switches "-alh")
#+end_src


* General configuration

Package configuration common to all systems.

** Auto-complete

** BM (visual bookmarks)

** Candidate Selection

I used to use IDO, and Ivy before that, and Emacs before that! Now, I'm trying out Selectrum.

*** Selectrum

Selectrum proposes to be a better solution for incremental narrowing in Emacs, replacing Helm, Ivy, and IDO.

#+begin_src emacs-lisp
(use-package selectrum
  :ensure t
  :config (selectrum-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package selectrum-prescient
  :ensure t
  :config
  (progn
    (selectrum-prescient-mode 1)
    (prescient-persist-mode 1)))
#+end_src

*** Marginalia

Marginalia enriches the candidates list, in the minibuffer, with key binding and documentation information. Marginalia calls it /annotations/.

#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :config
  (progn
    (marginalia-mode)
    (marginalia-cycle)))
#+end_src


** Darkroom

** Deft

** Detour

** Expand Region

** Flyspell

** NeoTree

I mostly use Treemacs but sometimes I want to access a tree-like structure without having to define a new project.

#+begin_src emacs-lisp
(use-package neotree :ensure t)
#+end_src

*** Show or hide keybiding

Show or hide NeoTree (~C-c n~).

#+begin_src emacs-lisp
(global-set-key (kbd "C-c n") 'neotree-toggle)
#+end_src

*** Theme

Display fancy icons. Requires the ~all-the-icons~ package.

#+begin_src emacs-lisp
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+end_src

*** Default keybindings

Only in Neotree Buffer:

- ~n~ next line, ~p~ previous line。
- ~SPC~ or ~RET~ or ~TAB~ Open current item if it is a file. Fold/Unfold current item if it is a directory.
- ~U~ Go up a directory
- ~g~ Refresh
- ~A~ Maximize/Minimize the NeoTree Window
- ~H~ Toggle display hidden files
- ~O~ Recursively open a directory
- ~C-c C-n~ Create a file or create a directory if filename ends with a ~/~
- ~C-c C-d~ Delete a file or a directory.
- ~C-c C-r~ Rename a file or a directory.
- ~C-c C-c~ Change the root directory.
- ~C-c C-p~ Copy a file or a directory.


** Undo Tree

Show undo history in a tree structure (~C-x u~).

Don't display the lighter in mode line.
#+BEGIN_SRC emacs-lisp
(setq undo-tree-mode-lighter nil)
#+END_SRC

Enable Undo Tree globally.

#+BEGIN_SRC emacs-lisp
(global-undo-tree-mode)
#+END_SRC


* Programming

Configuration specific to programming.


* Appearance

Look ~and feel~ configurations.

** Fonts

I feel that using a different font every day prevents boredom.

#+BEGIN_SRC emacs-lisp
(defun bj:font-random ()
  "Changes the current session font with a random one."
  (interactive)

  (let ((fonts (list "Lucida Console-13"))
        font)
    (if mac-p
        (setq fonts (list "Anonymous Pro-16"
                          "Comic Mono-14"
                          "CozetteVector-19"
                          "Menlo-14"
                          "Monaco-14"
                          "NovaMono-15"
                          "Victor Mono-15"
                          "iA Writer Mono S-15"
                          ))
      (setq fonts (list "NovaMono-12"
                        "Share Tech Mono-12"
                        "Ubuntu Mono-12")))
    (setq font (nth (random (length fonts)) fonts))
    (set-frame-font font)
    (message (format "Random font: %s" font))))
#+END_SRC

Chose a random font at the start of the session.

#+BEGIN_SRC emacs-lisp
(bj:font-random)
#+END_SRC

** Color Theme

I feel that using a different theme every day prevents boredom.

Most of this functionality was taken from Chaoji Li's package ~color-theme-random.el~.

*** Third party themes

Themes I like to use that aren't part of Emacs.

#+BEGIN_SRC emacs-lisp
(use-package birds-of-paradise-plus-theme :ensure t)
(use-package color-theme-modern           :ensure t)
(use-package darktooth-theme              :ensure t)
(use-package dracula-theme                :ensure t)
(use-package nord-theme                   :ensure t)
(use-package panda-theme                  :ensure t)
#+END_SRC

*** Favourite themes

All themes I like to use.

#+BEGIN_SRC emacs-lisp
(defvar bj:favourite-color-themes
  '((billw)
    (charcoal-black)
    (clarity)
    (dark-laptop)
    (desert)
    (goldenrod)
    (gray30)
    (hober)
    (jsc-dark)
    (railscast)
    (simple-1)
    (subdued)
    ;; My added themes:
    (birds-of-paradise-plus)
    (darktooth)
    (dracula)
    (nord)
    (panda)))
#+END_SRC

*** Current color theme

~M-x bj:current-color-theme~ tells me what is the color theme in session.

#+BEGIN_SRC emacs-lisp
(defvar bj:current-color-theme nil)

(defun bj:current-color-theme ()
  (interactive)
  (message (format "Current theme is: %s"
                   (symbol-name bj:current-color-theme))))
#+END_SRC

*** Change color theme at random

~M-x bj:color-theme-random~ chooses a color theme at random from ~bj:favourite-color-themes~.

#+BEGIN_SRC emacs-lisp
(defun bj:color-theme-random ()
  "Chooses a color theme at random from bj:favourite-color-themes."
  (interactive)
  (disable-theme bj:current-color-theme)
  (let ((weight-so-far 0) weight)
    (dolist (theme bj:favourite-color-themes)
      (setq weight (nth 1 theme))
      (unless weight (setq weight 1))
      (if (>= (random (+ weight weight-so-far)) weight-so-far)
          (setq bj:current-color-theme (car theme)))
      (setq weight-so-far (+ weight-so-far weight)))
    (when bj:current-color-theme
      (load-theme bj:current-color-theme t t)
      (enable-theme bj:current-color-theme))
    (message (format "Random color theme: %s" (symbol-name bj:current-color-theme)))))
#+END_SRC

*** Chose a random theme at startup.

#+BEGIN_SRC emacs-lisp
(bj:color-theme-random)
#+END_SRC

** Pulse

~pulse.el~ is an internal library which provides functions to flash a region of text.

Flash the current line…

#+BEGIN_SRC emacs-lisp
(defun pulse-line (&rest _)
      "Pulse the current line."
      (pulse-momentary-highlight-one-line (point)))
#+END_SRC

after any of thsese commands is executed.

#+BEGIN_SRC emacs-lisp
(dolist (command '(scroll-up-command
                   scroll-down-command
                   recenter-top-bottom
                   other-window))
  (advice-add command :after #'pulse-line))
#+END_SRC

Reference: https://karthinks.com/software/batteries-included-with-emacs/

** Icons

*** All the icons

This is an utility package to collect various Icon Fonts and propertize them within Emacs. It's mostly a dependency from *Treemacs* and *NeoTree* to have a more fancy appearance.

#+begin_src emacs-lisp
(use-package all-the-icons  :ensure t)
#+end_src

This won't work out of the box. One needs to install fonts ~M-x all-the-icons-install-fonts~.

**** All the icons dired

*Dired* support to *All-the-icons*.

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :ensure t
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+end_src

* Email

I'm trying to use Emacs as email client. The configuration is far from complete as I yet can't send emails.


* Runtime Revolution

Configurations specific to the workplace.
