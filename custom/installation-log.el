
(defvar *installation-log-separator* "--------------------------------------------------------------------------------")

(defun in-installation-log-top-separator-p ()
  (and (looking-at *installation-log-separator*)
       (save-excursion
	 (forward-line 1)
	 (let ((result (or (looking-at "System:")
			   (looking-at "Patch:"))))
	   (forward-line -1)
	   result))))

(defun previous-installation-log-mod ()
  (interactive)
  (beggining-of-installation-log-mod)
  (forward-line -1)
  (beggining-of-installation-log-mod))

(defun next-installation-log-mod ()
  (interactive)
  (end-of-installation-log-mod)
  (forward-line 1)
  (end-of-installation-log-mod)
  (beggining-of-installation-log-mod))

(defun beggining-of-installation-log-mod ()
  (interactive)
  (while (and (not (= (point) (point-min)))
	      (not (in-installation-log-top-separator-p)))
    (forward-line -1)))

(defun end-of-installation-log-mod ()
  (interactive)
  (while (and (char-after (point))
	      (not (looking-at "Installation:")))
    (forward-line 1))
  (forward-line 1))

(defun read-installation-log-field (field)
  (beggining-of-installation-log-mod)
  (while (and (char-after (point))
	      (not (looking-at field)))
    (forward-line 1))
  (forward-char (length field))
  (while (and (char-after (point))
	      (member (char-after (point)) '(9 32)))
    (forward-char))
  (let ((start (point)))
    (forward-line 1)
    (while (and (char-after (point))
		(member (char-after (point)) '(9 32)))
      (forward-line 1))
    (forward-char -1)
    (buffer-substring start (point))))

(defun edit-installation-log-modification-file (dir)
  (save-excursion
    (while (and (char-after (point))
		(not (member (char-after (point)) '(32 9))))
      (forward-char -1))
    (forward-char)
    (let ((start (point)))
      (while (and (char-after (point))
		  (not (member (char-after (point)) '(32 9 10))))
	(forward-char))
      (let ((file (format "%s/%s" dir (buffer-substring start (point)))))
	(if (file-exists-p file)
	    (let ((date-and-author (read-installation-log-field "Author:")))
	      (switch-to-buffer-other-window (find-file-noselect file))
	      (beginning-of-buffer)
	      (search-forward date-and-author)
	      (forward-char (- (length date-and-author))))
	    (beep-message (format "Could not open file %s" file)))))))

(defun edit-installation-log-source-file ()
  (interactive)
  (edit-installation-log-modification-file *sc-crews-top-dir*))

(defun edit-installation-log-original-file ()
  (interactive)
  (edit-installation-log-modification-file *sc-siscog-top-dir*))

(global-set-key [C-f1] 'edit-installation-log-source-file)
(global-set-key [C-f2] 'edit-installation-log-original-file)
(global-set-key [C-f3] 'beggining-of-installation-log-mod)
(global-set-key [C-f4] 'end-of-installation-log-mod)
(global-set-key [C-f5] 'previous-installation-log-mod)
(global-set-key [C-f6] 'next-installation-log-mod)
